void* rf_calloc_wrapper(rf_allocator allocator, rf_int amount, rf_int size);
void* rf_libc_allocator_wrapper(struct rf_allocator* this_allocator, rf_source_location source_location, rf_allocator_mode mode, rf_allocator_args args);
rf_int rf_libc_get_file_size(void* user_data, const char* filename);
bool rf_libc_load_file_into_buffer(void* user_data, const char* filename, void* dst, rf_int dst_size);
rf_recorded_error rf_get_last_recorded_error();
const char* rf_log_type_string(rf_log_type);
void rf_set_logger(rf_logger logger);
void rf_set_logger_filter(rf_log_type);
void rf_libc_printf_logger(struct rf_logger* logger, rf_source_location source_location, rf_log_type log_type, const char* msg, rf_error_type error_type, va_list args);
rf_int rf_libc_rand_wrapper(rf_int min, rf_int max);
rf_decoded_rune rf_decode_utf8_char(const char* text, rf_int len);
rf_decoded_utf8_stats rf_count_utf8_chars(const char* text, rf_int len);
rf_decoded_string rf_decode_utf8_to_buffer(const char* text, rf_int len, rf_rune* dst, rf_int dst_size);
rf_decoded_string rf_decode_utf8(const char* text, rf_int len, rf_allocator allocator);
float rf_next_pot(float it);
rf_vec2 rf_center_to_screen(float w, float h);
rf_vec2 rf_center_to_object(rf_sizef center_this, rf_rec to_this);
float rf_clamp(float value, float min, float max);
float rf_lerp(float start, float end, float amount);
rf_vec2 rf_vec2_add(rf_vec2 v1, rf_vec2 v2);
rf_vec2 rf_vec2_sub(rf_vec2 v1, rf_vec2 v2);
float rf_vec2_len(rf_vec2 v);
float rf_vec2_dot_product(rf_vec2 v1, rf_vec2 v2);
float rf_vec2_distance(rf_vec2 v1, rf_vec2 v2);
float rf_vec2_angle(rf_vec2 v1, rf_vec2 v2);
rf_vec2 rf_vec2_scale(rf_vec2 v, float scale);
rf_vec2 rf_vec2_mul_v(rf_vec2 v1, rf_vec2 v2);
rf_vec2 rf_vec2_negate(rf_vec2 v);
rf_vec2 rf_vec2_div(rf_vec2 v, float div);
rf_vec2 rf_vec2_div_v(rf_vec2 v1, rf_vec2 v2);
rf_vec2 rf_vec2_normalize(rf_vec2 v);
rf_vec2 rf_vec2_lerp(rf_vec2 v1, rf_vec2 v2, float amount);
rf_vec3 rf_vec3_add(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_sub(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_mul(rf_vec3 v, float scalar);
rf_vec3 rf_vec3_mul_v(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_cross_product(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_perpendicular(rf_vec3 v);
float rf_vec3_len(rf_vec3 v);
float rf_vec3_dot_product(rf_vec3 v1, rf_vec3 v2);
float rf_vec3_distance(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_scale(rf_vec3 v, float scale);
rf_vec3 rf_vec3_negate(rf_vec3 v);
rf_vec3 rf_vec3_div(rf_vec3 v, float div);
rf_vec3 rf_vec3_div_v(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_normalize(rf_vec3 v);
void rf_vec3_ortho_normalize(rf_vec3* v1, rf_vec3* v2);
rf_vec3 rf_vec3_transform(rf_vec3 v, rf_mat mat);
rf_vec3 rf_vec3_rotate_by_quaternion(rf_vec3 v, rf_quaternion q);
rf_vec3 rf_vec3_lerp(rf_vec3 v1, rf_vec3 v2, float amount);
rf_vec3 rf_vec3_reflect(rf_vec3 v, rf_vec3 normal);
rf_vec3 rf_vec3_min(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_max(rf_vec3 v1, rf_vec3 v2);
rf_vec3 rf_vec3_barycenter(rf_vec3 p, rf_vec3 a, rf_vec3 b, rf_vec3 c);
float rf_mat_determinant(rf_mat mat);
float rf_mat_trace(rf_mat mat);
rf_mat rf_mat_transpose(rf_mat mat);
rf_mat rf_mat_invert(rf_mat mat);
rf_mat rf_mat_normalize(rf_mat mat);
rf_mat rf_mat_identity(void);
rf_mat rf_mat_add(rf_mat left, rf_mat right);
rf_mat rf_mat_sub(rf_mat left, rf_mat right);
rf_mat rf_mat_translate(float x, float y, float z);
rf_mat rf_mat_rotate(rf_vec3 axis, float angle);
rf_mat rf_mat_rotate_xyz(rf_vec3 ang);
rf_mat rf_mat_rotate_x(float angle);
rf_mat rf_mat_rotate_y(float angle);
rf_mat rf_mat_rotate_z(float angle);
rf_mat rf_mat_scale(float x, float y, float z);
rf_mat rf_mat_mul(rf_mat left, rf_mat right);
rf_mat rf_mat_frustum(double left, double right, double bottom, double top, double near_val, double far_val);
rf_mat rf_mat_perspective(double fovy, double aspect, double near_val, double far_val);
rf_mat rf_mat_ortho(double left, double right, double bottom, double top, double near_val, double far_val);
rf_mat rf_mat_look_at(rf_vec3 eye, rf_vec3 target, rf_vec3 up);
rf_float16 rf_mat_to_float16(rf_mat mat);
rf_quaternion rf_quaternion_identity(void);
float rf_quaternion_len(rf_quaternion q);
rf_quaternion rf_quaternion_normalize(rf_quaternion q);
rf_quaternion rf_quaternion_invert(rf_quaternion q);
rf_quaternion rf_quaternion_mul(rf_quaternion q1, rf_quaternion q2);
rf_quaternion rf_quaternion_lerp(rf_quaternion q1, rf_quaternion q2, float amount);
rf_quaternion rf_quaternion_nlerp(rf_quaternion q1, rf_quaternion q2, float amount);
rf_quaternion rf_quaternion_slerp(rf_quaternion q1, rf_quaternion q2, float amount);
rf_quaternion rf_quaternion_from_vector3_to_vector3(rf_vec3 from, rf_vec3 to);
rf_quaternion rf_quaternion_from_matrix(rf_mat mat);
rf_mat rf_quaternion_to_matrix(rf_quaternion q);
rf_quaternion rf_quaternion_from_axis_angle(rf_vec3 axis, float angle);
void rf_quaternion_to_axis_angle(rf_quaternion q, rf_vec3* outAxis, float* outAngle);
rf_quaternion rf_quaternion_from_euler(float roll, float pitch, float yaw);
rf_vec3 rf_quaternion_to_euler(rf_quaternion q);
rf_quaternion rf_quaternion_transform(rf_quaternion q, rf_mat mat);
bool rf_check_collision_recs(rf_rec rec1, rf_rec rec2);
bool rf_check_collision_circles(rf_vec2 center1, float radius1, rf_vec2 center2, float radius2);
bool rf_check_collision_circle_rec(rf_vec2 center, float radius, rf_rec rec);
bool rf_check_collision_point_rec(rf_vec2 point, rf_rec rec);
bool rf_check_collision_point_circle(rf_vec2 point, rf_vec2 center, float radius);
bool rf_check_collision_point_triangle(rf_vec2 point, rf_vec2 p1, rf_vec2 p2, rf_vec2 p3);
rf_rec rf_get_collision_rec(rf_rec rec1, rf_rec rec2);
bool rf_check_collision_spheres(rf_vec3 center_a, float radius_a, rf_vec3 center_b, float radius_b);
bool rf_check_collision_boxes(rf_bounding_box box1, rf_bounding_box box2);
bool rf_check_collision_box_sphere(rf_bounding_box box, rf_vec3 center, float radius);
bool rf_check_collision_ray_sphere(rf_ray ray, rf_vec3 center, float radius);
bool rf_check_collision_ray_sphere_ex(rf_ray ray, rf_vec3 center, float radius, rf_vec3* collision_point);
bool rf_check_collision_ray_box(rf_ray ray, rf_bounding_box box);
rf_ray_hit_info rf_collision_ray_model(rf_ray ray, struct rf_model model);
rf_ray_hit_info rf_collision_ray_triangle(rf_ray ray, rf_vec3 p1, rf_vec3 p2, rf_vec3 p3);
rf_ray_hit_info rf_collision_ray_ground(rf_ray ray, float ground_height);
int rf_get_size_base64(const unsigned char* input);
rf_base64_output rf_decode_base64(const unsigned char* input, rf_allocator allocator);
const char* rf_pixel_format_string(rf_pixel_format format);
bool rf_is_uncompressed_format(rf_pixel_format format);
bool rf_is_compressed_format(rf_pixel_format format);
int rf_bits_per_pixel(rf_pixel_format format);
int rf_bytes_per_pixel(rf_uncompressed_pixel_format format);
int rf_pixel_buffer_size(int width, int height, rf_pixel_format format);
bool rf_format_pixels_to_normalized(const void* src, rf_int src_size, rf_uncompressed_pixel_format src_format, rf_vec4* dst, rf_int dst_size);
bool rf_format_pixels_to_rgba32(const void* src, rf_int src_size, rf_uncompressed_pixel_format src_format, rf_color* dst, rf_int dst_size);
bool rf_format_pixels(const void* src, rf_int src_size, rf_uncompressed_pixel_format src_format, void* dst, rf_int dst_size, rf_uncompressed_pixel_format dst_format);
rf_vec4 rf_format_one_pixel_to_normalized(const void* src, rf_uncompressed_pixel_format src_format);
rf_color rf_format_one_pixel_to_rgba32(const void* src, rf_uncompressed_pixel_format src_format);
void rf_format_one_pixel(const void* src, rf_uncompressed_pixel_format src_format, void* dst, rf_uncompressed_pixel_format dst_format);
bool rf_color_match_rgb(rf_color a, rf_color b);
bool rf_color_match(rf_color a, rf_color b);
int rf_color_to_int(rf_color color);
rf_vec4 rf_color_normalize(rf_color color);
rf_color rf_color_from_normalized(rf_vec4 normalized);
rf_vec3 rf_color_to_hsv(rf_color color);
rf_color rf_color_from_hsv(rf_vec3 hsv);
rf_color rf_color_from_int(int hex_value);
rf_color rf_fade(rf_color color, float alpha);
rf_vec3 rf_unproject(rf_vec3 source, rf_mat proj, rf_mat view);
rf_ray rf_get_mouse_ray(rf_sizei screen_size, rf_vec2 mouse_position, rf_camera3d camera);
rf_mat rf_get_camera_matrix(rf_camera3d camera);
rf_mat rf_get_camera_matrix2d(rf_camera2d camera);
rf_vec2 rf_get_world_to_screen(rf_sizei screen_size, rf_vec3 position, rf_camera3d camera);
rf_vec2 rf_get_world_to_screen2d(rf_vec2 position, rf_camera2d camera);
rf_vec2 rf_get_screen_to_world2d(rf_vec2 position, rf_camera2d camera);
void rf_set_camera3d_mode(rf_camera3d_state* state, rf_camera3d camera, rf_builtin_camera3d_mode mode);
void rf_update_camera3d(rf_camera3d* camera, rf_camera3d_state* state, rf_input_state_for_update_camera input_state);
int rf_image_size(rf_image image);
int rf_image_size_in_format(rf_image image, rf_pixel_format format);
bool rf_image_get_pixels_as_rgba32_to_buffer(rf_image image, rf_color* dst, rf_int dst_size);
bool rf_image_get_pixels_as_normalized_to_buffer(rf_image image, rf_vec4* dst, rf_int dst_size);
rf_color* rf_image_pixels_to_rgba32(rf_image image, rf_allocator allocator);
rf_vec4* rf_image_compute_pixels_to_normalized(rf_image image, rf_allocator allocator);
void rf_image_extract_palette_to_buffer(rf_image image, rf_color* palette_dst, rf_int palette_size);
rf_palette rf_image_extract_palette(rf_image image, rf_int palette_size, rf_allocator allocator);
rf_rec rf_image_alpha_border(rf_image image, float threshold);
bool rf_supports_image_file_type(const char* filename);
rf_image rf_load_image_from_file_data_to_buffer(const void* src, rf_int src_size, void* dst, rf_int dst_size, rf_desired_channels channels, rf_allocator temp_allocator);
rf_image rf_load_image_from_file_data(const void* src, rf_int src_size, rf_allocator allocator, rf_allocator temp_allocator);
rf_image rf_load_image_from_hdr_file_data_to_buffer(const void* src, rf_int src_size, void* dst, rf_int dst_size, rf_desired_channels channels, rf_allocator temp_allocator);
rf_image rf_load_image_from_hdr_file_data(const void* src, rf_int src_size, rf_allocator allocator, rf_allocator temp_allocator);
rf_image rf_load_image_from_format_to_buffer(const void* src, rf_int src_size, int src_width, int src_height, rf_uncompressed_pixel_format src_format, void* dst, rf_int dst_size, rf_uncompressed_pixel_format dst_format);
rf_image rf_load_image_from_file(const char* filename, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
void rf_unload_image(rf_image image, rf_allocator allocator);
int rf_mipmaps_image_size(rf_mipmaps_image image);
rf_mipmaps_stats rf_compute_mipmaps_stats(rf_image image, int desired_mipmaps_count);
rf_mipmaps_image rf_image_gen_mipmaps_to_buffer(rf_image image, int gen_mipmaps_count, void* dst, rf_int dst_size, rf_allocator temp_allocator);
rf_mipmaps_image rf_image_gen_mipmaps(rf_image image, int desired_mipmaps_count, rf_allocator allocator, rf_allocator temp_allocator);
void rf_unload_mipmaps_image(rf_mipmaps_image image, rf_allocator allocator);
rf_int rf_get_dds_image_size(const void* src, rf_int src_size);
rf_mipmaps_image rf_load_dds_image_to_buffer(const void* src, rf_int src_size, void* dst, rf_int dst_size);
rf_mipmaps_image rf_load_dds_image(const void* src, rf_int src_size, rf_allocator allocator);
rf_mipmaps_image rf_load_dds_image_from_file(const char* file, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_int rf_get_pkm_image_size(const void* src, rf_int src_size);
rf_image rf_load_pkm_image_to_buffer(const void* src, rf_int src_size, void* dst, rf_int dst_size);
rf_image rf_load_pkm_image(const void* src, rf_int src_size, rf_allocator allocator);
rf_image rf_load_pkm_image_from_file(const char* file, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_int rf_get_ktx_image_size(const void* src, rf_int src_size);
rf_mipmaps_image rf_load_ktx_image_to_buffer(const void* src, rf_int src_size, void* dst, rf_int dst_size);
rf_mipmaps_image rf_load_ktx_image(const void* src, rf_int src_size, rf_allocator allocator);
rf_mipmaps_image rf_load_ktx_image_from_file(const char* file, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_gif rf_load_animated_gif(const void* data, rf_int data_size, rf_allocator allocator, rf_allocator temp_allocator);
rf_gif rf_load_animated_gif_file(const char* filename, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_sizei rf_gif_frame_size(rf_gif gif);
rf_image rf_get_frame_from_gif(rf_gif gif, int frame);
void rf_unload_gif(rf_gif gif, rf_allocator allocator);
rf_vec2 rf_get_seed_for_cellular_image(int seeds_per_row, int tile_size, int i, rf_rand_proc rand);
rf_image rf_gen_image_color_to_buffer(int width, int height, rf_color color, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_color(int width, int height, rf_color color, rf_allocator allocator);
rf_image rf_gen_image_gradient_v_to_buffer(int width, int height, rf_color top, rf_color bottom, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_gradient_v(int width, int height, rf_color top, rf_color bottom, rf_allocator allocator);
rf_image rf_gen_image_gradient_h_to_buffer(int width, int height, rf_color left, rf_color right, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_gradient_h(int width, int height, rf_color left, rf_color right, rf_allocator allocator);
rf_image rf_gen_image_gradient_radial_to_buffer(int width, int height, float density, rf_color inner, rf_color outer, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_gradient_radial(int width, int height, float density, rf_color inner, rf_color outer, rf_allocator allocator);
rf_image rf_gen_image_checked_to_buffer(int width, int height, int checks_x, int checks_y, rf_color col1, rf_color col2, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_checked(int width, int height, int checks_x, int checks_y, rf_color col1, rf_color col2, rf_allocator allocator);
rf_image rf_gen_image_white_noise_to_buffer(int width, int height, float factor, rf_rand_proc rand, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_white_noise(int width, int height, float factor, rf_rand_proc rand, rf_allocator allocator);
rf_image rf_gen_image_perlin_noise_to_buffer(int width, int height, int offset_x, int offset_y, float scale, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_perlin_noise(int width, int height, int offset_x, int offset_y, float scale, rf_allocator allocator);
rf_image rf_gen_image_cellular_to_buffer(int width, int height, int tile_size, rf_rand_proc rand, rf_color* dst, rf_int dst_size);
rf_image rf_gen_image_cellular(int width, int height, int tile_size, rf_rand_proc rand, rf_allocator allocator);
rf_image rf_image_copy_to_buffer(rf_image image, void* dst, rf_int dst_size);
rf_image rf_image_copy(rf_image image, rf_allocator allocator);
rf_image rf_image_crop_to_buffer(rf_image image, rf_rec crop, void* dst, rf_int dst_size, rf_uncompressed_pixel_format dst_format);
rf_image rf_image_crop(rf_image image, rf_rec crop, rf_allocator allocator);
rf_image rf_image_resize_to_buffer(rf_image image, int new_width, int new_height, void* dst, rf_int dst_size, rf_allocator temp_allocator);
rf_image rf_image_resize(rf_image image, int new_width, int new_height, rf_allocator allocator, rf_allocator temp_allocator);
rf_image rf_image_resize_nn_to_buffer(rf_image image, int new_width, int new_height, void* dst, rf_int dst_size);
rf_image rf_image_resize_nn(rf_image image, int new_width, int new_height, rf_allocator allocator);
rf_image rf_image_format_to_buffer(rf_image image, rf_uncompressed_pixel_format dst_format, void* dst, rf_int dst_size);
rf_image rf_image_format(rf_image image, rf_uncompressed_pixel_format new_format, rf_allocator allocator);
rf_image rf_image_alpha_mask_to_buffer(rf_image image, rf_image alpha_mask, void* dst, rf_int dst_size);
rf_image rf_image_alpha_clear(rf_image image, rf_color color, float threshold, rf_allocator allocator, rf_allocator temp_allocator);
rf_image rf_image_alpha_premultiply(rf_image image, rf_allocator allocator, rf_allocator temp_allocator);
rf_rec rf_image_alpha_crop_rec(rf_image image, float threshold);
rf_image rf_image_alpha_crop(rf_image image, float threshold, rf_allocator allocator);
rf_image rf_image_dither(rf_image image, int r_bpp, int g_bpp, int b_bpp, int a_bpp, rf_allocator allocator, rf_allocator temp_allocator);
rf_image rf_image_flip_vertical_to_buffer(rf_image image, void* dst, rf_int dst_size);
rf_image rf_image_flip_vertical(rf_image image, rf_allocator allocator);
rf_image rf_image_flip_horizontal_to_buffer(rf_image image, void* dst, rf_int dst_size);
rf_image rf_image_flip_horizontal(rf_image image, rf_allocator allocator);
rf_image rf_image_rotate_cw_to_buffer(rf_image image, void* dst, rf_int dst_size);
rf_image rf_image_rotate_cw(rf_image image);
rf_image rf_image_rotate_ccw_to_buffer(rf_image image, void* dst, rf_int dst_size);
rf_image rf_image_rotate_ccw(rf_image image);
rf_image rf_image_color_tint_to_buffer(rf_image image, rf_color color, void* dst, rf_int dst_size);
rf_image rf_image_color_tint(rf_image image, rf_color color);
rf_image rf_image_color_invert_to_buffer(rf_image image, void* dst, rf_int dst_size);
rf_image rf_image_color_invert(rf_image image);
rf_image rf_image_color_grayscale_to_buffer(rf_image image, void* dst, rf_int dst_size);
rf_image rf_image_color_grayscale(rf_image image);
rf_image rf_image_color_contrast_to_buffer(rf_image image, float contrast, void* dst, rf_int dst_size);
rf_image rf_image_color_contrast(rf_image image, int contrast);
rf_image rf_image_color_brightness_to_buffer(rf_image image, int brightness, void* dst, rf_int dst_size);
rf_image rf_image_color_brightness(rf_image image, int brightness);
rf_image rf_image_color_replace_to_buffer(rf_image image, rf_color color, rf_color replace, void* dst, rf_int dst_size);
rf_image rf_image_color_replace(rf_image image, rf_color color, rf_color replace);
void rf_image_draw(rf_image* dst, rf_image src, rf_rec src_rec, rf_rec dst_rec, rf_color tint, rf_allocator temp_allocator);
void rf_image_draw_rectangle(rf_image* dst, rf_rec rec, rf_color color, rf_allocator temp_allocator);
void rf_image_draw_rectangle_lines(rf_image* dst, rf_rec rec, int thick, rf_color color, rf_allocator temp_allocator);
rf_shader rf_gfx_load_shader(const char* vs_code, const char* fs_code);
void rf_gfx_unload_shader(rf_shader shader);
int rf_gfx_get_shader_location(rf_shader shader, const char* uniform_name);
void rf_gfx_set_shader_value(rf_shader shader, int uniform_loc, const void* value, int uniform_name);
void rf_gfx_set_shader_value_v(rf_shader shader, int uniform_loc, const void* value, int uniform_name, int count);
void rf_gfx_set_shader_value_matrix(rf_shader shader, int uniform_loc, rf_mat mat);
void rf_gfx_set_shader_value_texture(rf_shader shader, int uniform_loc, rf_texture2d texture);
rf_mat rf_gfx_get_matrix_projection();
rf_mat rf_gfx_get_matrix_modelview();
void rf_gfx_set_matrix_projection(rf_mat proj);
void rf_gfx_set_matrix_modelview(rf_mat view);
void rf_gfx_blend_mode(rf_blend_mode mode);
void rf_gfx_matrix_mode(rf_matrix_mode mode);
void rf_gfx_push_matrix();
void rf_gfx_pop_matrix();
void rf_gfx_load_identity();
void rf_gfx_translatef(float x, float y, float z);
void rf_gfx_rotatef(float angleDeg, float x, float y, float z);
void rf_gfx_scalef(float x, float y, float z);
void rf_gfx_mult_matrixf(float* matf);
void rf_gfx_frustum(double left, double right, double bottom, double top, double znear, double zfar);
void rf_gfx_ortho(double left, double right, double bottom, double top, double znear, double zfar);
void rf_gfx_viewport(int x, int y, int width, int height);
void rf_gfx_begin(rf_drawing_mode mode);
void rf_gfx_end();
void rf_gfx_vertex2i(int x, int y);
void rf_gfx_vertex2f(float x, float y);
void rf_gfx_vertex3f(float x, float y, float z);
void rf_gfx_tex_coord2f(float x, float y);
void rf_gfx_normal3f(float x, float y, float z);
void rf_gfx_color4ub(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
void rf_gfx_color3f(float x, float y, float z);
void rf_gfx_color4f(float x, float y, float z, float w);
void rf_gfx_enable_texture(unsigned int id);
void rf_gfx_disable_texture();
void rf_gfx_set_texture_wrap(rf_texture2d texture, rf_texture_wrap_mode wrap_mode);
void rf_gfx_set_texture_filter(rf_texture2d texture, rf_texture_filter_mode filter_mode);
void rf_gfx_enable_render_texture(unsigned int id);
void rf_gfx_disable_render_texture(void);
void rf_gfx_enable_depth_test(void);
void rf_gfx_disable_depth_test(void);
void rf_gfx_enable_backface_culling(void);
void rf_gfx_disable_backface_culling(void);
void rf_gfx_enable_scissor_test(void);
void rf_gfx_disable_scissor_test(void);
void rf_gfx_scissor(int x, int y, int width, int height);
void rf_gfx_enable_wire_mode(void);
void rf_gfx_disable_wire_mode(void);
void rf_gfx_delete_textures(unsigned int id);
void rf_gfx_delete_render_textures(rf_render_texture2d target);
void rf_gfx_delete_shader(unsigned int id);
void rf_gfx_delete_vertex_arrays(unsigned int id);
void rf_gfx_delete_buffers(unsigned int id);
void rf_gfx_clear_color(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
void rf_gfx_clear_screen_buffers(void);
void rf_gfx_update_buffer(int buffer_id, void* data, int data_size);
unsigned int rf_gfx_load_attrib_buffer(unsigned int vao_id, int shader_loc, void* buffer, int size, bool dynamic);
void rf_gfx_init_vertex_buffer(struct rf_vertex_buffer* vertex_buffer);
void rf_gfx_close();
void rf_gfx_draw();
bool rf_gfx_check_buffer_limit(int v_count);
void rf_gfx_set_debug_marker(const char* text);
unsigned int rf_gfx_load_texture(void* data, int width, int height, rf_pixel_format format, int mipmap_count);
unsigned int rf_gfx_load_texture_depth(int width, int height, int bits, bool use_render_buffer);
unsigned int rf_gfx_load_texture_cubemap(void* data, int size, rf_pixel_format format);
void rf_gfx_update_texture(unsigned int id, int width, int height, rf_pixel_format format, const void* pixels, int pixels_size);
rf_gfx_pixel_format rf_gfx_get_internal_texture_formats(rf_pixel_format format);
void rf_gfx_unload_texture(unsigned int id);
void rf_gfx_generate_mipmaps(rf_texture2d* texture);
rf_image rf_gfx_read_texture_pixels_to_buffer(rf_texture2d texture, void* dst, int dst_size);
rf_image rf_gfx_read_texture_pixels(rf_texture2d texture, rf_allocator allocator);
void rf_gfx_read_screen_pixels(rf_color* dst, int width, int height);
rf_render_texture2d rf_gfx_load_render_texture(int width, int height, rf_pixel_format format, int depth_bits, bool use_depth_texture);
void rf_gfx_render_texture_attach(rf_render_texture2d target, unsigned int id, int attach_type);
bool rf_gfx_render_texture_complete(rf_render_texture2d target);
void rf_gfx_load_mesh(struct rf_mesh* mesh, bool dynamic);
void rf_gfx_update_mesh(struct rf_mesh mesh, int buffer, int num);
void rf_gfx_update_mesh_at(struct rf_mesh mesh, int buffer, int num, int index);
void rf_gfx_draw_mesh(struct rf_mesh mesh, struct rf_material material, rf_mat transform);
void rf_gfx_unload_mesh(struct rf_mesh mesh);
rf_render_batch rf_create_custom_render_batch_from_buffers(rf_vertex_buffer* vertex_buffers, rf_int vertex_buffers_count, rf_draw_call* draw_calls, rf_int draw_calls_count);
rf_render_batch rf_create_custom_render_batch(rf_int vertex_buffers_count, rf_int draw_calls_count, rf_int vertex_buffer_elements_count, rf_allocator allocator);
rf_render_batch rf_create_default_render_batch(rf_allocator allocator);
void rf_set_active_render_batch(rf_render_batch* batch);
void rf_unload_render_batch(rf_render_batch batch, rf_allocator allocator);
rf_texture2d rf_load_texture_from_file(const char* filename, rf_allocator temp_allocator, rf_io_callbacks io);
rf_texture2d rf_load_texture_from_file_data(const void* data, rf_int dst_size, rf_allocator temp_allocator);
rf_texture2d rf_load_texture_from_image(rf_image image);
rf_texture2d rf_load_texture_from_image_with_mipmaps(rf_mipmaps_image image);
rf_texture_cubemap rf_load_texture_cubemap_from_image(rf_image image, rf_cubemap_layout_type layout_type, rf_allocator temp_allocator);
rf_render_texture2d rf_load_render_texture(int width, int height);
void rf_update_texture(rf_texture2d texture, const void* pixels, rf_int pixels_size);
void rf_gen_texture_mipmaps(rf_texture2d* texture);
void rf_set_texture_filter(rf_texture2d texture, rf_texture_filter_mode filter_mode);
void rf_set_texture_wrap(rf_texture2d texture, rf_texture_wrap_mode wrap_mode);
void rf_unload_texture(rf_texture2d texture);
void rf_unload_render_texture(rf_render_texture2d target);
rf_texture2d rf_gen_texture_cubemap(rf_shader shader, rf_texture2d sky_hdr, rf_int size);
rf_texture2d rf_gen_texture_irradiance(rf_shader shader, rf_texture2d cubemap, rf_int size);
rf_texture2d rf_gen_texture_prefilter(rf_shader shader, rf_texture2d cubemap, rf_int size);
rf_texture2d rf_gen_texture_brdf(rf_shader shader, rf_int size);
rf_ttf_font_info rf_parse_ttf_font(const void* ttf_data, rf_int font_size);
void rf_compute_ttf_font_glyph_metrics(rf_ttf_font_info* font_info, const int* codepoints, rf_int codepoints_count, rf_glyph_info* dst, rf_int dst_count);
int rf_compute_ttf_font_atlas_width(int padding, rf_glyph_info* glyph_metrics, rf_int glyphs_count);
rf_image rf_generate_ttf_font_atlas(rf_ttf_font_info* font_info, int atlas_width, int padding, rf_glyph_info* glyphs, rf_int glyphs_count, rf_font_antialias antialias, unsigned short* dst, rf_int dst_count, rf_allocator temp_allocator);
rf_font rf_ttf_font_from_atlas(int font_size, rf_image atlas, rf_glyph_info* glyph_metrics, rf_int glyphs_count);
rf_font rf_load_ttf_font_from_data(const void* font_file_data, int font_size, rf_font_antialias antialias, const int* chars, rf_int char_count, rf_allocator allocator, rf_allocator temp_allocator);
rf_font rf_load_ttf_font_from_file(const char* filename, int font_size, rf_font_antialias antialias, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
bool rf_compute_glyph_metrics_from_image(rf_image image, rf_color key, const int* codepoints, rf_glyph_info* dst, rf_int codepoints_and_dst_count);
rf_font rf_load_image_font_from_data(rf_image image, rf_glyph_info* glyphs, rf_int glyphs_count);
rf_font rf_load_image_font(rf_image image, rf_color key, rf_allocator allocator);
rf_font rf_load_image_font_from_file(const char* path, rf_color key, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
void rf_unload_font(rf_font font, rf_allocator allocator);
rf_glyph_index rf_get_glyph_index(rf_font font, int character);
int rf_font_height(rf_font font, float font_size);
rf_sizef rf_measure_text(rf_font font, const char* text, float font_size, float extra_spacing);
rf_sizef rf_measure_text_rec(rf_font font, const char* text, rf_rec rec, float font_size, float extra_spacing, bool wrap);
rf_sizef rf_measure_string(rf_font font, const char* text, int len, float font_size, float extra_spacing);
rf_sizef rf_measure_string_rec(rf_font font, const char* text, int text_len, rf_rec rec, float font_size, float extra_spacing, bool wrap);
void rf_clear(rf_color color);
void rf_begin();
void rf_end();
void rf_begin_2d(rf_camera2d camera);
void rf_end_2d();
void rf_begin_3d(rf_camera3d camera);
void rf_end_3d();
void rf_begin_render_to_texture(rf_render_texture2d target);
void rf_end_render_to_texture();
void rf_begin_scissor_mode(int x, int y, int width, int height);
void rf_end_scissor_mode();
void rf_begin_shader(rf_shader shader);
void rf_end_shader();
void rf_begin_blend_mode(rf_blend_mode mode);
void rf_end_blend_mode();
void rf_draw_pixel(int pos_x, int pos_y, rf_color color);
void rf_draw_pixel_v(rf_vec2 position, rf_color color);
void rf_draw_line(int startPosX, int startPosY, int endPosX, int endPosY, rf_color color);
void rf_draw_line_v(rf_vec2 startPos, rf_vec2 endPos, rf_color color);
void rf_draw_line_ex(rf_vec2 startPos, rf_vec2 endPos, float thick, rf_color color);
void rf_draw_line_bezier(rf_vec2 start_pos, rf_vec2 end_pos, float thick, rf_color color);
void rf_draw_line_strip(rf_vec2* points, int num_points, rf_color color);
void rf_draw_circle(int center_x, int center_y, float radius, rf_color color);
void rf_draw_circle_v(rf_vec2 center, float radius, rf_color color);
void rf_draw_circle_sector(rf_vec2 center, float radius, int start_angle, int end_angle, int segments, rf_color color);
void rf_draw_circle_sector_lines(rf_vec2 center, float radius, int start_angle, int end_angle, int segments, rf_color color);
void rf_draw_circle_gradient(int center_x, int center_y, float radius, rf_color color1, rf_color color2);
void rf_draw_circle_lines(int center_x, int center_y, float radius, rf_color color);
void rf_draw_ring(rf_vec2 center, float inner_radius, float outer_radius, int start_angle, int end_angle, int segments, rf_color color);
void rf_draw_ring_lines(rf_vec2 center, float inner_radius, float outer_radius, int start_angle, int end_angle, int segments, rf_color color);
void rf_draw_rectangle(int posX, int posY, int width, int height, rf_color color);
void rf_draw_rectangle_v(rf_vec2 position, rf_vec2 size, rf_color color);
void rf_draw_rectangle_rec(rf_rec rec, rf_color color);
void rf_draw_rectangle_pro(rf_rec rec, rf_vec2 origin, float rotation, rf_color color);
void rf_draw_rectangle_gradient_v(int pos_x, int pos_y, int width, int height, rf_color color1, rf_color color2);// Draw a vertical-gradient-filled rectangle
void rf_draw_rectangle_gradient_h(int pos_x, int pos_y, int width, int height, rf_color color1, rf_color color2);// Draw a horizontal-gradient-filled rectangle
void rf_draw_rectangle_gradient(rf_rec rec, rf_color col1, rf_color col2, rf_color col3, rf_color col4);
void rf_draw_rectangle_outline(rf_rec rec, int line_thick, rf_color color);
void rf_draw_rectangle_rounded(rf_rec rec, float roundness, int segments, rf_color color);
void rf_draw_rectangle_rounded_lines(rf_rec rec, float roundness, int segments, int line_thick, rf_color color);
void rf_draw_triangle(rf_vec2 v1, rf_vec2 v2, rf_vec2 v3, rf_color color);
void rf_draw_triangle_lines(rf_vec2 v1, rf_vec2 v2, rf_vec2 v3, rf_color color);
void rf_draw_triangle_fan(rf_vec2* points, int num_points, rf_color color);
void rf_draw_triangle_strip(rf_vec2* points, int points_count, rf_color color);
void rf_draw_poly(rf_vec2 center, int sides, float radius, float rotation, rf_color color);
void rf_draw_texture(rf_texture2d texture, int x, int y, rf_color tint);
void rf_draw_texture_ex(rf_texture2d texture, int x, int y, int w, int h, float rotation, rf_color tint);
void rf_draw_texture_region(rf_texture2d texture, rf_rec source_rec, rf_rec dest_rec, rf_vec2 origin, float rotation, rf_color tint);
void rf_draw_texture_npatch(rf_texture2d texture, rf_npatch_info n_patch_info, rf_rec dest_rec, rf_vec2 origin, float rotation, rf_color tint);
void rf_draw_string(const char* string, int string_len, int posX, int posY, int font_size, rf_color color);
void rf_draw_string_ex(rf_font font, const char* string, int string_len, rf_vec2 position, float fontSize, float spacing, rf_color tint);
void rf_draw_string_wrap(rf_font font, const char* string, int string_len, rf_vec2 position, float font_size, float spacing, rf_color tint, float wrap_width, rf_text_wrap_mode mode);
void rf_draw_string_rec(rf_font font, const char* string, int string_len, rf_rec rec, float font_size, float spacing, rf_text_wrap_mode wrap, rf_color tint);
void rf_draw_text(const char* text, int posX, int posY, int font_size, rf_color color);
void rf_draw_text_ex(rf_font font, const char* text, rf_vec2 position, float fontSize, float spacing, rf_color tint);
void rf_draw_text_wrap(rf_font font, const char* text, rf_vec2 position, float font_size, float spacing, rf_color tint, float wrap_width, rf_text_wrap_mode mode);
void rf_draw_text_rec(rf_font font, const char* text, rf_rec rec, float font_size, float spacing, rf_text_wrap_mode wrap, rf_color tint);
void rf_draw_line3d(rf_vec3 start_pos, rf_vec3 end_pos, rf_color color);
void rf_draw_circle3d(rf_vec3 center, float radius, rf_vec3 rotation_axis, float rotation_angle, rf_color color);
void rf_draw_cube(rf_vec3 position, float width, float height, float length, rf_color color);
void rf_draw_cube_wires(rf_vec3 position, float width, float height, float length, rf_color color);
void rf_draw_cube_texture(rf_texture2d texture, rf_vec3 position, float width, float height, float length, rf_color color);
void rf_draw_sphere(rf_vec3 center_pos, float radius, rf_color color);
void rf_draw_sphere_ex(rf_vec3 center_pos, float radius, int rings, int slices, rf_color color);
void rf_draw_sphere_wires(rf_vec3 center_pos, float radius, int rings, int slices, rf_color color);
void rf_draw_cylinder(rf_vec3 position, float radius_top, float radius_bottom, float height, int slices, rf_color color);
void rf_draw_cylinder_wires(rf_vec3 position, float radius_top, float radius_bottom, float height, int slices, rf_color color);
void rf_draw_plane(rf_vec3 center_pos, rf_vec2 size, rf_color color);
void rf_draw_ray(rf_ray ray, rf_color color);
void rf_draw_grid(int slices, float spacing);
void rf_draw_gizmo(rf_vec3 position);
void rf_draw_model(rf_model model, rf_vec3 position, float scale, rf_color tint);
void rf_draw_model_ex(rf_model model, rf_vec3 position, rf_vec3 rotation_axis, float rotation_angle, rf_vec3 scale, rf_color tint);
void rf_draw_model_wires(rf_model model, rf_vec3 position, rf_vec3 rotation_axis, float rotation_angle, rf_vec3 scale, rf_color tint);
void rf_draw_bounding_box(rf_bounding_box box, rf_color color);
void rf_draw_billboard(rf_camera3d camera, rf_texture2d texture, rf_vec3 center, float size, rf_color tint);
void rf_draw_billboard_rec(rf_camera3d camera, rf_texture2d texture, rf_rec source_rec, rf_vec3 center, float size, rf_color tint);
rf_bounding_box rf_mesh_bounding_box(rf_mesh mesh);
void rf_mesh_compute_tangents(rf_mesh* mesh, rf_allocator allocator, rf_allocator temp_allocator);
void rf_mesh_compute_binormals(rf_mesh* mesh);
void rf_unload_mesh(rf_mesh mesh, rf_allocator allocator);
rf_model rf_load_model(const char* filename, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_model rf_load_model_from_obj(const char* filename, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_model rf_load_model_from_iqm(const char* filename, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_model rf_load_model_from_gltf(const char* filename, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_model rf_load_model_from_mesh(rf_mesh mesh, rf_allocator allocator);
void rf_unload_model(rf_model model, rf_allocator allocator);
rf_materials_array rf_load_materials_from_mtl(const char* filename, rf_allocator allocator, rf_io_callbacks io);
void rf_unload_material(rf_material material, rf_allocator allocator);
rf_model_animation_array rf_load_model_animations_from_iqm_file(const char* filename, rf_allocator allocator, rf_allocator temp_allocator, rf_io_callbacks io);
rf_model_animation_array rf_load_model_animations_from_iqm(const unsigned char* data, int data_size, rf_allocator allocator, rf_allocator temp_allocator);
void rf_update_model_animation(rf_model model, rf_model_animation anim, int frame);
bool rf_is_model_animation_valid(rf_model model, rf_model_animation anim);
void rf_unload_model_animation(rf_model_animation anim, rf_allocator allocator);
rf_mesh rf_gen_mesh_cube(float width, float height, float length, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_poly(int sides, float radius, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_plane(float width, float length, int res_x, int res_z, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_sphere(float radius, int rings, int slices, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_hemi_sphere(float radius, int rings, int slices, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_cylinder(float radius, float height, int slices, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_torus(float radius, float size, int rad_seg, int sides, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_knot(float radius, float size, int rad_seg, int sides, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_heightmap(rf_image heightmap, rf_vec3 size, rf_allocator allocator, rf_allocator temp_allocator);
rf_mesh rf_gen_mesh_cubicmap(rf_image cubicmap, rf_vec3 cube_size, rf_allocator allocator, rf_allocator temp_allocator);
void rf_init_context(rf_context* ctx);
void rf_init_gfx(int screen_width, int screen_height, rf_gfx_backend_data* gfx_data);
rf_material rf_load_default_material(rf_allocator allocator);
rf_shader rf_load_default_shader();
rf_font rf_get_default_font();
rf_shader rf_get_default_shader();
rf_texture2d rf_get_default_texture();
rf_context* rf_get_context();
rf_image rf_get_screen_data(rf_color* dst, rf_int dst_size);
void rf_set_global_context_pointer(rf_context* ctx);
void rf_set_viewport(int width, int height);
void rf_set_shapes_texture(rf_texture2d texture, rf_rec source);
rf_material rf_load_default_material_ez();
rf_image rf_get_screen_data_ez();
rf_base64_output rf_decode_base64_ez(const unsigned char* input);
rf_image rf_gfx_read_texture_pixels_ez(rf_texture2d texture);
rf_color* rf_image_pixels_to_rgba32_ez(rf_image image);
rf_vec4* rf_image_compute_pixels_to_normalized_ez(rf_image image);
rf_palette rf_image_extract_palette_ez(rf_image image, int palette_size);
rf_image rf_load_image_from_file_data_ez(const void* src, int src_size);
rf_image rf_load_image_from_hdr_file_data_ez(const void* src, int src_size);
rf_image rf_load_image_from_file_ez(const char* filename);
void rf_unload_image_ez(rf_image image);
rf_image rf_image_copy_ez(rf_image image);
rf_image rf_image_crop_ez(rf_image image, rf_rec crop);
rf_image rf_image_resize_ez(rf_image image, int new_width, int new_height);
rf_image rf_image_resize_nn_ez(rf_image image, int new_width, int new_height);
rf_image rf_image_format_ez(rf_image image, rf_uncompressed_pixel_format new_format);
rf_image rf_image_alpha_clear_ez(rf_image image, rf_color color, float threshold);
rf_image rf_image_alpha_premultiply_ez(rf_image image);
rf_image rf_image_alpha_crop_ez(rf_image image, float threshold);
rf_image rf_image_dither_ez(rf_image image, int r_bpp, int g_bpp, int b_bpp, int a_bpp);
rf_image rf_image_flip_vertical_ez(rf_image image);
rf_image rf_image_flip_horizontal_ez(rf_image image);
rf_vec2 rf_get_seed_for_cellular_image_ez(int seeds_per_row, int tile_size, int i);
rf_image rf_gen_image_color_ez(int width, int height, rf_color color);
rf_image rf_gen_image_gradient_v_ez(int width, int height, rf_color top, rf_color bottom);
rf_image rf_gen_image_gradient_h_ez(int width, int height, rf_color left, rf_color right);
rf_image rf_gen_image_gradient_radial_ez(int width, int height, float density, rf_color inner, rf_color outer);
rf_image rf_gen_image_checked_ez(int width, int height, int checks_x, int checks_y, rf_color col1, rf_color col2);
rf_image rf_gen_image_white_noise_ez(int width, int height, float factor);
rf_image rf_gen_image_perlin_noise_ez(int width, int height, int offset_x, int offset_y, float scale);
rf_image rf_gen_image_cellular_ez(int width, int height, int tile_size);
rf_mipmaps_image rf_image_gen_mipmaps_ez(rf_image image, int gen_mipmaps_count);
void rf_unload_mipmaps_image_ez(rf_mipmaps_image image);
rf_mipmaps_image rf_load_dds_image_ez(const void* src, int src_size);
rf_mipmaps_image rf_load_dds_image_from_file_ez(const char* file);
rf_image rf_load_pkm_image_ez(const void* src, int src_size);
rf_image rf_load_pkm_image_from_file_ez(const char* file);
rf_mipmaps_image rf_load_ktx_image_ez(const void* src, int src_size);
rf_mipmaps_image rf_load_ktx_image_from_file_ez(const char* file);
rf_gif rf_load_animated_gif_ez(const void* data, int data_size);
rf_gif rf_load_animated_gif_file_ez(const char* filename);
void rf_unload_gif_ez(rf_gif gif);
rf_texture2d rf_load_texture_from_file_ez(const char* filename);
rf_texture2d rf_load_texture_from_file_data_ez(const void* data, int dst_size);
rf_texture_cubemap rf_load_texture_cubemap_from_image_ez(rf_image image, rf_cubemap_layout_type layout_type);
rf_font rf_load_ttf_font_from_data_ez(const void* font_file_data, int font_size, rf_font_antialias antialias, const int* chars, int chars_count);
rf_font rf_load_ttf_font_from_file_ez(const char* filename, int font_size, rf_font_antialias antialias);
rf_font rf_load_image_font_ez(rf_image image, rf_color key);
rf_font rf_load_image_font_from_file_ez(const char* path, rf_color key);
void rf_unload_font_ez(rf_font font);
rf_decoded_string rf_decode_utf8_ez(const char* text, int len);
void rf_image_draw_ez(rf_image* dst, rf_image src, rf_rec src_rec, rf_rec dst_rec, rf_color tint);
void rf_image_draw_rectangle_ez(rf_image* dst, rf_rec rec, rf_color color);
void rf_image_draw_rectangle_lines_ez(rf_image* dst, rf_rec rec, int thick, rf_color color);
void rf_mesh_compute_tangents_ez(rf_mesh* mesh);
void rf_unload_mesh_ez(rf_mesh mesh);
rf_model rf_load_model_ez(const char* filename);
rf_model rf_load_model_from_obj_ez(const char* filename);
rf_model rf_load_model_from_iqm_ez(const char* filename);
rf_model rf_load_model_from_gltf_ez(const char* filename);
rf_model rf_load_model_from_mesh_ez(rf_mesh mesh);
void rf_unload_model_ez(rf_model model);
rf_materials_array rf_load_materials_from_mtl_ez(const char* filename);
void rf_unload_material_ez(rf_material material);
rf_model_animation_array rf_load_model_animations_from_iqm_file_ez(const char* filename);
rf_model_animation_array rf_load_model_animations_from_iqm_ez(const unsigned char* data, int data_size);
void rf_unload_model_animation_ez(rf_model_animation anim);
rf_mesh rf_gen_mesh_cube_ez(float width, float height, float length);
rf_mesh rf_gen_mesh_poly_ez(int sides, float radius);
rf_mesh rf_gen_mesh_plane_ez(float width, float length, int res_x, int res_z);
rf_mesh rf_gen_mesh_sphere_ez(float radius, int rings, int slices);
rf_mesh rf_gen_mesh_hemi_sphere_ez(float radius, int rings, int slices);
rf_mesh rf_gen_mesh_cylinder_ez(float radius, float height, int slices);
rf_mesh rf_gen_mesh_torus_ez(float radius, float size, int rad_seg, int sides);
rf_mesh rf_gen_mesh_knot_ez(float radius, float size, int rad_seg, int sides);
rf_mesh rf_gen_mesh_heightmap_ez(rf_image heightmap, rf_vec3 size);
rf_mesh rf_gen_mesh_cubicmap_ez(rf_image cubicmap, rf_vec3 cube_size);
